{
	"variables": {},
	"demoflow": {
		"paused": false,
		"id": "demoflow",
		"reference": "",
		"author": "",
		"group": "",
		"icon": "ti ti-microchip",
		"color": "",
		"version": "",
		"readme": "",
		"url": "https://",
		"name": "TEST",
		"components": {
			"c3w9271d9c": "<script total>\n\n\texports.name = 'Timer';\n\texports.group = 'Triggers';\n\texports.version = '2';\n\texports.icon = 'ti ti-clock';\n\texports.author = 'Total.js';\n\texports.config = { random: true, type: 'string', data: '', interval: 5000 };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar interval;\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar val;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10)) : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = null;\n\t\t\tif (config.interval)\n\t\t\t\tinterval = setInterval(() => instance.trigger(), config.interval);\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = null;\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<script>\n\tFUNC.ftimer_exec = function(el) {\n\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id') });\n\t};\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.interval\" config=\"type:number;required:1\">Interval</ui-component>\n\t\t\t\t<div class=\"help\">In milliseconds</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.type\" config=\"dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</ui-component>\n\t\t\t</div>\n\t\t</div>\n\t\t<hr />\n\t\t<div class=\"m\">\n\t\t\t<ui-component name=\"input\" path=\"?.random\" config=\"type:checkbox\">Random data</ui-component>\n\t\t</div>\n\t\t<ui-bind path=\"?.random\" config=\"hide\" class=\"hidden block\">\n\t\t\t<hr />\n\t\t\t<ui-component name=\"input\" path=\"?.data\" config=\"required:1\">Data</ui-component>\n\t\t</ui-bind>\n\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow in the specified interval.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.ftimer_exec\">Run</button>\n\t\t<div class=\"help\">Interval: <ui-bind path=\"CONFIG.interval\" config=\"text;empty\"></ui-bind> ms</div>\n\t</div>\n</body>",
			"transformer": "<script total>\n\n\texports.id = 'transformer';\n\texports.name = 'Transformer';\n\texports.icon = 'ti ti-pulse';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.group = 'Common';\n\texports.config = { code: 'data.name = data.name.toUpperCase()', clear: false };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar repo = {};\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tvar val = fn(data, repo, $.refs);\n\t\t\t\t\tif (val != null)\n\t\t\t\t\t\tdata = val;\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.destroy();\n\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$.send('output', data);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\ttry {\n\t\t\t\tif (config.code)\n\t\t\t\t\tfn = new Function('data', 'repo', 'refs', config.code + ';return data;');\n\t\t\t\telse\n\t\t\t\t\tfn = null;\n\t\t\t\tif (config.clear)\n\t\t\t\t\trepo = {};\n\t\t\t} catch (e) {\n\t\t\t\tinstance.throw(e);\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nWith this component you can easily modify incoming data. Then the `data` content is delivered.\n\n__Example 1__:\n\n```js\n// \"data\" is a reference to message data\ndata.name = data.name.toUpperCase();\n```\n\n__Example 2__:\n\n```js\ndata = data.toUpperCase();\n```\n\n__Example 3__:\n\n```js\nvar tmp = data;\ndata = {};\ndata.name = tmp.Name;\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"codemirror\" path=\"?.code\" config=\"type:javascript;minheight:300;parent:auto;margin:85;tabs:true;trim:true\" class=\"m\"></ui-component>\n\t\t<ui-component name=\"input\" path=\"?.clear\" config=\"type:checkbox\">Clear repository object</ui-component>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>"
		},
		"design": {
			"ilhck442x": {
				"id": "ilhck442x",
				"config": {
					"random": false,
					"type": "object",
					"data": "new Date()",
					"interval": 1000
				},
				"x": 326,
				"y": 229,
				"component": "c3w9271d9c",
				"connections": {
					"output": [
						{
							"id": "ilhck4zhn",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "ti ti-clock",
					"group": "Triggers",
					"name": "Timer",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ilhck4zhn": {
				"id": "ilhck4zhn",
				"config": {
					"code": "console.log('Loaded from Flow:', data);",
					"clear": false
				},
				"x": 628,
				"y": 431,
				"component": "transformer",
				"connections": {},
				"template": {
					"icon": "ti ti-pulse",
					"group": "Common",
					"name": "Transformer",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			}
		},
		"variables": {},
		"sources": {},
		"proxypath": "",
		"origin": "http://127.0.0.1:8000",
		"dtcreated": "2023-05-06T22:27:53.182Z",
		"size": 6947
	}
}